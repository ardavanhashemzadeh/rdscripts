#!/bin/bash
# Cloud Foundry Tools
# https://linkedin.com/in/ardyhash
# Dependencies: bash, tr, awk, grep, sort, head, tail, xargs, cf commandline utility

# set -x
scriptName=$(basename -- "$0")
export numberRE='^[0-9]+$'
export cfAppsStartLine=5
export cfAppStartLine=14
export cfEventsStartLine=14
export restartDenominator=7
export refreshDenominator=5
export paramCommand=$1
export retryWait=5
export cfTmpHome=~/.rdcftmp
export healthyString="is Healthy"
export unhealthyString="is Unhealthy"

source ~/.rdscripts/cf/flags

if [[ $# -lt 1 ]]; then
cat <<HELP
Cloud Foundry Tools
Not enough arguments given, please use following format:
./$scriptName COMMAND [ARG1 ARG2 ARG3...]
Commands: la (list all), li (list instances), lc (list crashed), lh (list health), thi (list instance health), rc (restart crashed), rce (recent crash events), bp (buildpacks)
Rampage/Status:			./$scriptName kill/status
List Instance information:		./$scriptName li [APPNAME]
Restart/Refresh App Instance:	./$scriptName rai/rfi/lhi APPNAME INST
Rolling Restart/Refresh:        ./$scriptName rr/rf/lh APPNAME
Rolling Restart/Refresh:        ./$scriptName rr/rf/lh APPNAME INSTCOUNT
Rolling Restart/Refresh:	./$scriptName rr/rf/lh APPNAME FIRSTINST LASTINST
Rolling Restart/Refresh:        ./$scriptName rr/rf/lh APPNAME FIRSTINST LASTINST INSTCOUNT
HELP
exit 1
fi

function SetCfHome {
	if [[ -d $CF_HOME ]]; then
		if [[ ! -d $cfTmpHome ]]; then
			mkdir $cfTmpHome
		fi
		cp $CF_HOME $cfTmpHome/$PPID.$BASHPID -rf && export CF_HOME=$cfTmpHome/$PPID.$BASHPID
	fi
}; export -f SetCfHome

function BuildPacks {
	until buildpacks=$(cf app $app 2>/dev/null | grep -i -e "buildpacks")
		do sleep 3
	done
	printf "$app-$buildpacks\n"
}; export -f BuildPacks

function ListApps {
	cf apps | tail -n +$cfAppsStartLine | sort | if [ -z $1 ]; then cat; else grep $1; fi
}; export -f ListApps

function ListInsts {
	echo $app; cf app $app | tail -n +$cfAppStartLine
}; export -f ListInsts

function ListLogs {
	printf "\n\n\n"; cf logs $app --recent
}; export -f ListInsts

function ListCrashedApps {
	ListApps | grep -e started -e crashed | sort | tr "/" " " | awk '{if ($3!=$4) print $0}'
}; export -f ListCrashedApps

function RestartCrashedInstances {
	for app in $(ListCrashedApps | awk '{print $1}'); do
		cf app $app | tail -n +14 | awk -v app=$app '{ if($2="crashed") print "restart-app-instance "app" "substr($1,2)" | head -n1"}'
	done | xargs -L1 -P0 -I{} bash -c "cf {}"
}; export -f RestartCrashedInstances

function GetAppInfo {
	export appstring=$(ListApps $1 | tr "," " " | tr "/" " " | awk -v d=$denominator '{if ($4/d <1) print $1" 1 "$3" "$7; else print $1" "int($4/d)" "$3" "$7}' ) || return 1
	export app=$(echo $appstring | awk '{print $1}')
	export concurrentInstances=$(echo $appstring | awk '{print $2}')
	export totalInstances=$(echo $appstring | awk '{print $3}')
	export url=$(echo $appstring | awk '{print $4}')
	export guid=$(cf app $app --guid) || return 2
}; export -f GetAppInfo

function SimpleRestartAppInstance {
	cf restart-app-instance $1 $2 | head -n1; if [[ ${PIPESTATUS[0]} -eq 141 ]]; then return 0; else return ${PIPESTATUS[0]}; fi
}; export -f SimpleRestartAppInstance

function ListHealthInstance {
	curl $url/health -H "X-CF-APP-INSTANCE":"$guid:$2" -sfI --silent | head -n1 | grep "200 OK" >/dev/null && echo "$app:$2 $healthyString" || echo "$app:$2 $unhealtheyString"
}; export -f ListHealthInstance

function RecentCrashEvents {
	echo $app; cf events $app | tail -n +$cfEventsStartLine |  grep -e $(date +"%Y-%m-%d") -e $(date -d "yesterday" '+%Y-%m-%d')
}; export -f RecentCrashEvents

function RestartAppInstance {
	SetCfHome
	cf app $app | tail -n +$cfAppStartLine | awk '{print $1}' | grep -w "#$2" > /dev/null || return 1
	until (SimpleRestartAppInstance $app $2); do echo "Failed to restart instance $2 of $app, retrying in 10 seconds"; sleep 10; done
	sleep 20
	until (ListHealthInstance $app $2 | grep -e "$healthyString"); do
		cf app $app | tail -n +$cfAppStartLine | grep -w "#$2" | awk -v app=$app -v inst=$2 \
			'{ if ($1=="#"inst && $2=="crashed") system ("cf restart-app-instance "app" "inst" | head -n1; sleep 180"); print $0 }' > /dev/null 2>&1
		sleep 10
	done
	rm -rf $CF_HOME
}; export -f RestartAppInstance

function RefreshAppInstance {
	cf app $app | tail -n +$cfAppStartLine | awk '{print $1}' | grep -w "#$2" > /dev/null && \
		curl -X POST $url/refresh -H "X-CF-APP-INSTANCE":"$guid:$2"  -sSfI > /dev/null && echo "Refreshed instance $2 of $1" 
}; export -f RefreshAppInstance

function MatchingApps {
	ListApps $1 | awk '{print $1}'
}; export -f MatchingApps

function FirstInstance {
	if [[ $1 -ge 0 ]] && [[ $1 =~ $numberRE ]]; then echo $1; else echo 0; fi
}; export -f FirstInstance

function LastInstance {
	if [[ $1 -le $totalInstances ]] && [[ $1 =~ $numberRE ]]; then echo $1; else echo $(($totalInstances-1)); fi
}; export -f LastInstance

function ConcurrentInstances {
	if [[ $1 = "000" ]]; then echo 0
		else if [[ $1 -gt 0 ]] && [[ $1 -le $concurrentInstances ]] && [[ $1 =~ $numberRE ]]; then
			echo $1; else echo $concurrentInstances
		fi
	fi
}; export -f ConcurrentInstances

function RollingCommand {
	if [[ $# -le 2 ]]; then
		for inst in $(seq $(FirstInstance $2) $(LastInstance $3));
			do echo $app $inst
		done | xargs -L1 -P$(ConcurrentInstances $2) -I{} bash -c "$command {}"
	fi
	if [[ $# -le 4 ]] && [[ $2 =~ $numberRE ]] && [[ $3 =~ $numberRE ]]; then
		for inst in $(seq $(FirstInstance $2) $(LastInstance $3));
			do echo $app $inst
		done | xargs -L1 -P$(ConcurrentInstances $4) -I{} bash -c "$command {}"
	fi
}; export -f RollingCommand

if [[ $paramCommand = "rr" ]] || [[ $paramCommand = "rai" ]] || [[ $paramCommand = "rf" ]] || [[ $paramCommand = "rfi" ]] || [[ $paramCommand = "rc" ]] && [[ ! $isAdmin -eq 1 ]]; then
	echo "Admin command detected, please set the admin flag before retrying"
	exit 1
fi

if [[ $paramCommand = "rr" ]] || [[ $paramCommand = "rai" ]]; then command=RestartAppInstance; denominator=$restartDenominator; fi
if [[ $paramCommand = "rf" ]] || [[ $paramCommand = "rfi" ]]; then command=RefreshAppInstance; denominator=$refreshDenominator; fi
if [[ $paramCommand = "lh" ]] || [[ $paramCommand = "lhi" ]]; then command=ListHealthInstance; denominator=$refreshDenominator; fi

if [[ $paramCommand = "kill" ]]; then ps aux | grep -e cftools -e RefreshAppInstance -e RestartAppInstance | awk '{print $2}' | xargs -L1 kill; fi
if [[ $paramCommand = "status" ]]; then ps aux | grep -e cftools -e RefreshAppInstance -e RestartAppInstance | grep -v grep; fi
if [[ $paramCommand = "rai" ]] || [[ $paramCommand = "rfi" ]] || [[ $paramCommand = "lhi" ]] && [[ $3 =~ $numberRE ]]; then
	date; for app in $(MatchingApps $2); do
		GetAppInfo $app; $command $app $3
	done; date; exit
fi
if [[ $paramCommand = "rr" ]] || [[ $paramCommand = "rf" ]] || [[ $paramCommand = "lh" ]] && [[ $# -ge 2 ]]; then
	date; for app in $(MatchingApps $2); do
		GetAppInfo $app; RollingCommand $app $3 $4 $5
	done; date; exit
fi
if [[ $paramCommand = "la" ]]; then ListApps | if [ -z $2 ];then cat;else grep -e $2; fi ; fi
if [[ $paramCommand = "li" ]]; then for app in $(MatchingApps $2); do until (ListInsts); do sleep $retryWait; done; done; fi
if [[ $paramCommand = "lc" ]]; then ListCrashedApps; fi
if [[ $paramCommand = "ll" ]]; then for app in $(MatchingApps $2); do ListLogs; done; fi
if [[ $paramCommand = "bp" ]]; then for app in $(MatchingApps $2); do BuildPacks; done; fi
if [[ $paramCommand = "rc" ]]; then RestartCrashedInstances; fi
if [[ $paramCommand = "rce" ]]; then for app in $(MatchingApps $2); do RecentCrashEvents; done; fi
